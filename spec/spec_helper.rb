# frozen_string_literal: true

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
ENV['RACK_ENV'] = 'test'
require 'simplecov'
SimpleCov.start
require './config/environment'
require './spec/support/custom_helpers'
require 'capybara/rspec'
require 'capybara/cuprite'

# not like selenium, error on cuprite driver (even the default one)
# affecting on another test that not using any javascript driver
begin
  remote_flag = nil
  if ENV['CHROME_URL']
    CHROME_URL = ENV['CHROME_URL']
    CHROME_HOST, CHROME_PORT =
      if CHROME_URL
        URI.parse(CHROME_URL).yield_self do |uri|
          [uri.host, uri.port]
        end
      end
    TCPSocket.new(CHROME_HOST, CHROME_PORT)
    remote_flag = true
  else
    Ferrum::Browser.new
    remote_flag = false
  end

  options = {
    window_size: [1200, 800],
    inspector: true
  }

  if remote_flag
    options.merge!({
                     url: ENV['CHROME_URL'],
                     browser_options: { 'no-sandbox' => nil }
                   })
  end

  Capybara.register_driver(:cuprite) do |app|
    Capybara::Cuprite::Driver.new(app, options)
  end

  Capybara.server_host = if ENV['CHROME_URL']
                           Socket.ip_address_list.find(&:ipv4_private?)&.ip_address
                         else
                           'localhost'
                         end
  Capybara.server_port = 8201
  Capybara.always_include_port = true
  Capybara.javascript_driver = :cuprite
rescue SocketError, Ferrum::BinaryNotFoundError
  Capybara.register_driver(:empty) do |_app|
    Class.new do
      def method_missing(_m, *_args)
        error_msg = <<~ERROR
          It seems that your cuprite doesn't working properly
          please check your CHROME_URL if you use remote docker
          or your chrome binary (check your PATH or BROWSER_PATH)
        ERROR
        raise error_msg
      end
    end.new
  end
  Capybara.javascript_driver = :empty
end

RSpec.configure do |config|
  config.include Rack::Test::Methods
  config.include CustomHelpers
  config.include Capybara::DSL, type: :feature
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = 'spec/examples.txt'

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  redis = Redis.new(
    host: ENV['REDIS_HOST'], port: ENV['REDIS_PORT'], db: ENV['REDIS_DB']
  )

  config.around(:example, type: :feature) do |example|
    redis.flushdb

    example.run

    redis.flushdb
  end

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
end
